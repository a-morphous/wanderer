import { Feed } from 'feed'
import fs from 'fs'
import path from 'path'
import sanitizeHtml from 'sanitize-html'

export default class FeedPlugin {
	constructor() {
		// runs on no files!
		this.extensions = []
	}

	url(file, site) {
		// noop
		return ''
	}

	build(opts) {
		return true
	}

	afterBuild(opts) {
		const siteConfig = opts.site.siteConfiguration ?? {}
		const rssConfiguration = siteConfig.rss ?? {}
		const feedURL = rssConfiguration.url ?? siteConfig.url
		const itemLimit = rssConfiguration?.feed?.limit ?? 20
		if (!feedURL) {
			console.warn('Your site config needs a URL to build a proper feed.')
			return
		}

		const author = {
			name: rssConfiguration.author ?? siteConfig.author,
			email: rssConfiguration.email ?? siteConfig.email ?? '',
		}

		const feed = new Feed({
			title: rssConfiguration.title ?? siteConfig.title ?? 'Wanderer Site',
			description:
				rssConfiguration.description ?? siteConfig.description ?? 'An autogenerated RSS feed',
			id: feedURL.endsWith('/') ? feedURL : feedURL + '/',
			link: feedURL.endsWith('/') ? feedURL : feedURL + '/',
			language: rssConfiguration.language ?? siteConfig.feedLanguage ?? 'en',
			image: rssConfiguration.image ?? siteConfig.feedImage ?? '',
			favicon: rssConfiguration.favicon ?? siteConfig.favicon ?? '',
			copyright: rssConfiguration.copyright ?? siteConfig.copyright ?? '',
			feedLinks: {
				rss: `${feedURL}/feed.xml`,
				json: `${feedURL}/feed.json`,
				atom: `${feedURL}/feed.xml`,
			},
			author,
		})

		if (!rssConfiguration.feed) {
			console.warn(
				`You need to set the site's 'rss.feed' variable to be a feed query in order to generate a proper rss feed`
			)
			return
		}

		const feedQuery =
			typeof rssConfiguration.feed.query === 'string'
				? {
						rawQuery: rssConfiguration.feed.query,
				  }
				: {
						predicates: Array.isArray(rssConfiguration.feed.query)
							? rssConfiguration.feed.query
							: [rssConfiguration.feed.query],
				  }

		if (feedQuery.predicates) {
			feedQuery.predicates.push({
				key: 'isPage',
				value: true,
				modifier: '=',
				operator: 'AND',
			})
		}

		feedQuery.isAscending = rssConfiguration.feed.isAscending
		feedQuery.sortBy = rssConfiguration.feed.sortBy

		// go above the actual limit because some non-html results can get included too,
		// and we need to skip them.
		feedQuery.limit = itemLimit + 10

		// generate the query for the feed
		const items = opts.allFiles.db.query(feedQuery)
		let itemsInFeed = 0
		for (let file of items) {
			if (!file.isPage) {
				continue
			}
			if (!opts.allURLs[file.id].endsWith('.html')) {
				continue
			}
			feed.addItem({
				title: file.title,
				id: feedURL + '/' + file.url,
				link: feedURL + '/' + file.url,
				description: sanitizeHtml(file.configuration?.description ?? file.html ?? file.text ?? ''),
				date: file.date,
				author: [author],
			})
			itemsInFeed += 1
			if (itemsInFeed >= itemLimit) {
				break
			}
		}

		// build the feed files
		fs.writeFileSync(path.resolve(opts.site.buildDirectory, 'feed.xml'), feed.atom1())
	}
}
